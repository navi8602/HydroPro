// src/components/dashboard/alerts/AlertsList.tsx
import { AlertBadge } from './AlertBadge';
import type { SystemAlert } from '../../../types/alerts';

interface AlertsListProps {
    alerts: SystemAlert[];
    onDismiss?: (alertId: string) => void;
    onResolve?: (alertId: string) => void;
}

export function AlertsList({ alerts, onDismiss, onResolve }: AlertsListProps) {
    if (alerts.length === 0) {
        return (
            <div className="text-center py-8 bg-gray-50 rounded-lg">
                <span className="text-2xl mb-3">üéâ</span>
                <h3 className="text-lg font-medium text-gray-900">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                <p className="text-gray-500">–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</p>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            {alerts.map(alert => (
                <div
                    key={alert.id}
                    className="flex items-start justify-between p-4 bg-white rounded-lg border border-gray-200"
                >
                    <div className="flex items-start space-x-3">
                        <span className="text-2xl">{getAlertIcon(alert.severity)}</span>
                        <div>
                            <div className="flex items-center space-x-2">
                                <h4 className="font-medium">{alert.title}</h4>
                                <AlertBadge severity={alert.severity}>
                                    {getAlertSeverityLabel(alert.severity)}
                                </AlertBadge>
                            </div>
                            <p className="text-sm text-gray-600 mt-1">{alert.message}</p>
                            <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                                <span>{formatAlertTime(alert.timestamp)}</span>
                                {alert.source && (
                                    <span>–ò—Å—Ç–æ—á–Ω–∏–∫: {alert.source}</span>
                                )}
                            </div>
                        </div>
                    </div>

                    <div className="flex items-center space-x-2">
                        {onResolve && !alert.resolved && (
                            <button
                                onClick={() => onResolve(alert.id)}
                                className="px-3 py-1 text-sm text-green-600 hover:bg-green-50 rounded-lg"
                            >
                                –†–µ—à–µ–Ω–æ
                            </button>
                        )}
                        {onDismiss && (
                            <button
                                onClick={() => onDismiss(alert.id)}
                                className="p-1 text-gray-400 hover:text-gray-500"
                            >
                                ‚úï
                            </button>
                        )}
                    </div>
                </div>
            ))}
        </div>
    );
}

function getAlertIcon(severity: SystemAlert['severity']): string {
    const icons = {
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è',
        error: 'üö®',
        success: '‚úÖ'
    };
    return icons[severity];
}

function getAlertSeverityLabel(severity: SystemAlert['severity']): string {
    const labels = {
        info: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        warning: '–í–Ω–∏–º–∞–Ω–∏–µ',
        error: '–ö—Ä–∏—Ç–∏—á–Ω–æ',
        success: '–£—Å–ø–µ—à–Ω–æ'
    };
    return labels[severity];
}

function formatAlertTime(timestamp: string): string {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - date.getTime();

    if (diff < 60000) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á. –Ω–∞–∑–∞–¥`;

    return date.toLocaleDateString();
}
